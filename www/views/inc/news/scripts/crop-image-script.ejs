<script>
var CropImage = (function() {

function blobToFile(theBlob, fileName){
    //A Blob() is almost a File() - it's just missing the two properties below which we will add
    theBlob.lastModifiedDate = new Date();
    theBlob.name = fileName;
    return theBlob;
}
function base64ToBlob(base64, mime) 
		{
			mime = mime || '';
			var sliceSize = 1024;
			var byteChars = window.atob(base64);
			var byteArrays = [];

			for (var offset = 0, len = byteChars.length; offset < len; offset += sliceSize) {
				var slice = byteChars.slice(offset, offset + sliceSize);

				var byteNumbers = new Array(slice.length);
				for (var i = 0; i < slice.length; i++) {
					byteNumbers[i] = slice.charCodeAt(i);
				}

				var byteArray = new Uint8Array(byteNumbers);

				byteArrays.push(byteArray);
			}

			var blob = new Blob(byteArrays, {type: mime});
			return blobToFile(blob,'trung.jpg');
		}

function dataURItoBlob(dataURI) {
    // convert base64/URLEncoded data component to raw binary data held in a string
    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0)
        byteString = atob(dataURI.split(',')[1]);
    else
        byteString = unescape(dataURI.split(',')[1]);

    // separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

    // write the bytes of the string to a typed array
    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ia], {type:mimeString});
}
function demoUpload(btnUpload,blockBg,hiddenImg,Sizes) {
    var $uploadCrop;
    function readFile(input) {
         if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#block-upload-avatar').addClass('ready');
                $uploadCrop.croppie('bind', {
                    url: e.target.result
                }).then(function(){
                });
                
            }
            
            reader.readAsDataURL(input.files[0]);
        }
        else {
            alert("Sorry - you're browser doesn't support the FileReader API")
        }
    }

    $uploadCrop = $('#block-upload-avatar').croppie({
        viewport: {
            width: Sizes.viewport.width,
            height: Sizes.viewport.height,
        },
        // mouseWheelZoom:false,
        // showZoomer:false,
        // enableResize:false,
        boundary: { width: Sizes.boundary.width, height: Sizes.boundary.height },
        enableExif: true,
        enableOrientation: true

    });

    $("#rotate-left").on("click", function() {
    $uploadCrop.croppie('rotate', -90);
    });
    $("#rotate-right").on("click", function() {
    $uploadCrop.croppie('rotate', 90);
    });
    $(btnUpload).on('change', function () { 
        readFile(this); 
    });
    $('.upload-cancel').on('click',function(){
        $('.popup-upload').removeClass('active');
    })
    
    $('#btn-result-avatar').on('click', function (ev) {
        $uploadCrop.croppie('result', {
            type: 'canvas',
            size: {width: Sizes.result.width, height: Sizes.result.height}
        }).then(function (resp) {
            var jpegFile64 = resp.replace(/^data:image\/(png|jpeg);base64,/, "");
            $(blockBg).css("background-image","url(data:image/jpeg;base64,"+jpegFile64+")");
            $(blockBg).css("border","none");
            $(blockBg).find('.block-avatar__btn').css("display","none");
            $(hiddenImg).attr("src",jpegFile64);
            $('.popup-upload').removeClass('active');
        });
    });
}
function bindNavigation () {
    var $body = $('body');
    $('nav a').on('click', function (ev) {
        var lnk = $(ev.currentTarget),
            href = lnk.attr('href'),
            targetTop = $('a[name=' + href.substring(1) + ']').offset().top;

        $body.animate({ scrollTop: targetTop });
        ev.preventDefault();
    });
}

function init(btnUpload,blockBg,hiddenImg,Sizes) {
    bindNavigation();
    demoUpload(btnUpload,blockBg,hiddenImg,Sizes);
}
return {
    init: init
};
})();


// Full version of `log` that:
//  * Prevents errors on console methods when no console present.
//  * Exposes a global 'log' function that preserves line numbering and formatting.
(function () {
var method;
var noop = function () { };
var methods = [
  'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
  'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
  'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
  'timeStamp', 'trace', 'warn'
];
var length = methods.length;
var console = (window.console = window.console || {});

while (length--) {
method = methods[length];

// Only stub undefined methods.
if (!console[method]) {
    console[method] = noop;
}
}


if (Function.prototype.bind) {
window.log = Function.prototype.bind.call(console.log, console);
}
else {
window.log = function() { 
  Function.prototype.apply.call(console.log, console, arguments);
};
}
})();

</script>